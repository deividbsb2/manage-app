{"version":3,"sources":["webpack:///./src/app/person/list/list.module.ts","webpack:///./src/app/person/list/list.page.html","webpack:///./src/app/person/list/list.page.scss","webpack:///./src/app/person/list/list.page.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAyC;AACM;AACF;AACU;AAEV;AAEN;AAEvC,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,mDAAQ;KACpB;CACF,CAAC;AAWF;IAAA;IAA6B,CAAC;IAAjB,cAAc;QAT1B,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,0DAAW;gBACX,0DAAW;gBACX,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;aAC9B;YACD,YAAY,EAAE,CAAC,mDAAQ,CAAC;SACzB,CAAC;OACW,cAAc,CAAG;IAAD,qBAAC;CAAA;AAAH;;;;;;;;;;;;ACzB3B,whBAAwhB,WAAW,2FAA2F,aAAa,0DAA0D,yBAAyB,uK;;;;;;;;;;;ACA9tB,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AACkB;AAEX;AAQzD;IAGE,kBACS,aAA4B,EAC5B,iBAAoC,EACpC,eAAgC;QAFhC,kBAAa,GAAb,aAAa,CAAe;QAC5B,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,oBAAe,GAAf,eAAe,CAAiB;IACrC,CAAC;IAEL,2BAAQ,GAAR;QACE,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IAEK,4BAAS,GAAf;;;;;;4BACkB,qBAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC;4BAClD,OAAO,EAAE,SAAS;yBACnB,CAAC;;wBAFI,OAAO,GAAG,SAEd;wBACF,qBAAM,OAAO,CAAC,OAAO,EAAE;;wBAAvB,SAAuB,CAAC;wBACxB,qBAAM,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE;iCAC9B,SAAS,CAAC,aAAG;gCACZ,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gCACjB,KAAI,CAAC,MAAM,GAAG,GAAG,CAAC;gCAClB,OAAO,CAAC,OAAO,EAAE,CAAC;4BACpB,CAAC,EAAE,aAAG;gCACJ,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gCACjB,OAAO,CAAC,OAAO,EAAE,CAAC;gCAClB,KAAI,CAAC,YAAY,CAAC,qCAAqC,CAAC,CAAC;4BAC3D,CAAC,CAAC;;wBATJ,SASI,CAAC;;;;;KACN;IAEK,+BAAY,GAAlB,UAAmB,OAAe;;;;;4BAClB,qBAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC;4BAC9C,OAAO,EAAE,OAAO;4BAChB,QAAQ,EAAE,IAAI;4BACd,eAAe,EAAE,IAAI;4BACrB,eAAe,EAAE,QAAQ;yBAC1B,CAAC;;wBALI,KAAK,GAAG,SAKZ;wBACF,KAAK,CAAC,OAAO,EAAE,CAAC;;;;;KACjB;IAtCU,QAAQ;QALpB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;yCAKwB,oEAAa;YACT,gEAAiB;YACnB,8DAAe;OAN9B,QAAQ,CAuCpB;IAAD,eAAC;CAAA;AAvCoB","file":"person-list-list-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ListPage } from './list.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ListPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [ListPage]\n})\nexport class ListPageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-menu-button></ion-menu-button>\\n    </ion-buttons>\\n    <ion-title>\\n      Pessoas\\n    </ion-title>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button routerLink=\\\"/create-person\\\">\\n        <ion-icon name=\\\"add-circle\\\" color=\\\"primary\\\"></ion-icon>\\n      </ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content padding>\\n  <ion-list>\\n    <ion-item *ngFor=\\\"let person of people\\\" routerLink=\\\"/detail-person/{{person.id}}\\\">\\n      <ion-icon name=\\\"person\\\" slot=\\\"start\\\" color=\\\"primary\\\"></ion-icon>\\n      {{person.name}}\\n      <div class=\\\"item-note\\\" slot=\\\"end\\\">\\n        {{person.createdAt | date}}\\n      </div>\\n    </ion-item>\\n  </ion-list>\\n  <ion-list *ngIf=\\\"!people\\\">\\n    <ion-item>NÃ£o possui pessoas cadastrados</ion-item>\\n  </ion-list>\\n</ion-content>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport { LoadingController, ToastController } from '@ionic/angular';\n\nimport { PersonService } from '../shared/person.service';\nimport { Person } from '../shared/person';\n\n@Component({\n  selector: 'app-list',\n  templateUrl: './list.page.html',\n  styleUrls: ['./list.page.scss'],\n})\nexport class ListPage implements OnInit {\n  people: Person[];\n\n  constructor(\n    public personService: PersonService,\n    public loadingController: LoadingController,\n    public toastController: ToastController\n  ) { }\n\n  ngOnInit() {\n    this.getPeople();\n  }\n\n  async getPeople() {\n    const loading = await this.loadingController.create({\n      message: 'Loading'\n    });\n    await loading.present();\n    await this.personService.getAll()\n      .subscribe(res => {\n        console.log(res);\n        this.people = res;\n        loading.dismiss();\n      }, err => {\n        console.log(err);\n        loading.dismiss();\n        this.presentToast('Erro ao consultar. Tente novamente!');\n      });\n  }\n\n  async presentToast(message: string) {\n    const toast = await this.toastController.create({\n      message: message,\n      duration: 2000,\n      showCloseButton: true,\n      closeButtonText: 'Fechar'\n    });\n    toast.present();\n  }\n}\n"],"sourceRoot":""}