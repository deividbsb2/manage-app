{"version":3,"sources":["webpack:///./src/app/person/shared/person.service.ts","webpack:///./src/app/shared/abstract-service.ts","webpack:///./src/app/shared/api.service.ts"],"names":[],"mappings":"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","file":"default~manage-manage-manage-module~person-create-create-module~person-detail-detail-module~person-e~2399f100.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { ApiService } from '../../shared/api.service';\nimport { AbstractService } from '../../shared/abstract-service';\nimport { Person } from './person';\nimport { HttpClient } from '@angular/common/http';\n\nconst ROUTE = 'people';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PersonService extends AbstractService<Person> {\n\n  constructor(public api: ApiService, http: HttpClient) {\n    super('\\people', http);\n  }\n\n  getAll() {\n    return this.getAll();\n  }\n\n  getById(id: number) {\n    return this.api.getById(ROUTE, id);\n  }\n\n  post(data) {\n    return this.api.post(ROUTE, data);\n  }\n\n  put(id: number, data) {\n    return this.api.put(ROUTE, id, data);\n  }\n\n  delete(id: number) {\n    return this.api.delete(ROUTE, id);\n  }\n\n}\n","import { environment } from '../../environments/environment';\nimport { HttpClient, HttpErrorResponse, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n// /--------------------------------------------------\\\n// | RepositoryInterface interface                    |\n// |--------------------------------------------------|\n// | Definição de métodos default para CRUD           |\n// \\--------------------------------------------------/\n/**\n * OBSERVAÇÃO:\n * Utilizar o padrão Repository ao invés do padrão DAO que é obsoleto\n */\nexport interface RepositoryInterface<T> {\n    getAll(): Observable<T[]>; // only recommended for small collections\n    get(id: number): Observable<T>;\n    add(entity: T): Observable<T>;\n    update(entity: any, id: number): Observable<T>;\n    remove(id: number): Observable<any>;\n}\n// /--------------------------------------------------\\\n// | AbstractService class                            |\n// |--------------------------------------------------|\n// | Definição de métodos/atributos default           |\n// | Esta classe deverá ser extendida por todas as    |\n// | classes de serviço que irão tratar modelos ou    |\n// | entidades de negócio.                            |\n// | Exemplo:                                         |\n// |                                                  |\n// | export class AlunoService                        |\n// |              extends AbstractService<Aluno>      |\n// |                                                  |\n// \\--------------------------------------------------/\nexport abstract class AbstractService<T> implements RepositoryInterface<T> {\n    private baseUrl: string;\n    private jsonType = 'application/json';\n    // utilizar o novo provider do http (@angular/common/http)\n    public constructor(baseUrl: string, protected http?: HttpClient, private withCredentials: boolean = true) {\n        this.baseUrl = baseUrl;\n    }\n    public getAll(): Observable<T[]> {\n        return this.http.get<T[]>(this.getUrl(), this.headers());\n    }\n    /**\n     * Utilizado para recuperar apenas um objeto\n     * @param {number} id\n     * @returns {Observable<T>}\n     */\n    public get(id: number): Observable<T> {\n        return this.http.get<T>(this.getUrl(), this.headers());\n    }\n\n    public add(entity: T): Observable<T> {\n        return this.http.post<T>(this.getUrl(), entity, this.headers());\n    }\n\n    public update(entity: any, id: number): Observable<any> {\n        return this.http.put<T>(this.getUrl('/' + id), JSON.stringify(entity), this.headers());\n        //  .subscribe(\n        //  (val) => {\n        //    console.log(\"PUT call successful value returned in body\", val);\n        //  },\n        //    (err: HttpErrorResponse) => {\n        //    console.log(\"PUT call in error\", err);\n        //  },\n        //  () => {\n        //    console.log(\"The PUT observable is now completed.\");\n        //  })\n    }\n\n    public remove(id: number): Observable<any> {\n        return this.http.delete(this.getUrl('/' + id), this.headers()).pipe(catchError(this.handleError));\n        //  .subscribe(\n        //  (val) => {\n        //    console.log(\"DELETE call successful value returned in body\", val);\n        //  },\n        //    (err: HttpErrorResponse) => {\n        //    console.log(\"DELETE call in error\", err);\n        //  },\n        //  () => {\n        //    console.log(\"The DELETE observable is now completed.\");\n        //  })\n    }\n    // /--------------------------------------------------\\\n    // | Métodos auxiliares                               |\n    // |--------------------------------------------------|\n    // | Funções de ajuda/tratamento da API http    |\n    // \\--------------------------------------------------/\n    /**\n     * Retorna a url absoluta considerando o 'contexto'  e a 'url relativa'.\n     * @param relativeUrl\n     * @returns string\n     */\n    protected getUrl(relativeUrl?: string): string {\n        let absoluteUrl = environment.apiUrl + this.baseUrl;\n        if (relativeUrl !== null && relativeUrl !== undefined) {\n            absoluteUrl += relativeUrl;\n        }\n        return absoluteUrl;\n    }\n\n    private handleError(error: HttpErrorResponse) {\n        if (error.error instanceof ErrorEvent) {\n            console.error('An error occurred:', error.error.message);\n        } else {\n            console.error(\n                `Backend returned code ${error.status}, ` +\n                `body was: ${error.error}`);\n        }\n        return throwError('Something bad happened; please try again later.');\n    }\n\n    /**\n     * Gera um objeto `options` default para ser injetado nas requisições HTTP\n     *\n     * @param boolean - Indica se deve utilizar credentials.\n     */\n    protected headers() {\n        const httpOptions = {\n            headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n        };\n        return httpOptions;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { catchError, tap, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\nconst apiUrl = environment.apiUrl;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  constructor(private http: HttpClient) { }\n\n  private handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      console.error('An error occurred:', error.error.message);\n    } else {\n      console.error(\n        `Backend returned code ${error.status}, ` +\n        `body was: ${error.error}`);\n    }\n    return throwError('Something bad happened; please try again later.');\n  }\n\n  private extractData(res: Response) {\n    let body: any = res;\n    if (body.data) {\n      body = body.data;\n    }\n    return body || {};\n  }\n\n  getAll(route: string): Observable<any> {\n    return this.http.get(`${apiUrl}/${route}`, httpOptions).pipe(\n      map(this.extractData),\n      catchError(this.handleError));\n  }\n\n  getById(route: string, id: number): Observable<any> {\n    const url = `${apiUrl}/${route}/${id}`;\n    return this.http.get(url, httpOptions).pipe(\n      map(this.extractData),\n      catchError(this.handleError));\n  }\n\n  post(route: string, data): Observable<any> {\n    const url = `${apiUrl}/${route}`;\n    return this.http.post(url, data, httpOptions)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  put(route: string, id: number, data): Observable<any> {\n    const url = `${apiUrl}/${route}/${id}`;\n    return this.http.put(url, data, httpOptions)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  delete(route: string, id: number): Observable<{}> {\n    const url = `${apiUrl}/${route}/${id}`;\n    return this.http.delete(url, httpOptions)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n}\n"],"sourceRoot":""}